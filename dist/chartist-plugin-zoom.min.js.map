{"version":3,"sources":["chartist-plugin-zoom.js"],"names":["root","factory","define","amd","Chartist","returnExportsGlobal","exports","module","require","this","window","document","hide","rect","attr","style","show","getRect","firstPoint","secondPoint","x","y","width","height","position","event","svg","transform","clientX","clientY","svgElement","tagName","ownerSVGElement","matrix","getScreenCTM","point","createSVGPoint","matrixTransform","inverse","project","value","axis","bounds","range","max","min","scale","type","base","Math","pow","baseLog","axisLength","val","log","defaultOptions","pointClipOffset","plugins","zoom","options","extend","chart","copyTouch","touch","p","id","identifier","ongoingTouchIndexById","idToFind","i","ongoingTouches","length","onTouchStart","touches","changedTouches","push","onTouchMove","idx","splice","preventDefault","onTouchCancel","removeTouches","onTouchEnd","zoomIn","onMouseDown","button","isInRect","chartRect","downPosition","x1","x2","y2","y1","onMouseUp","resetOnRightMouseBtn","reset","axisX","highLow","low","high","axisY","update","data","onZoom","onMouseMove","Line","on","element","clip-path","addMask","offset","defs","elem","fill","handler","addEventListener","_node","querySelector","series","querySelectorAll","classNames","svgElements"],"mappings":"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","file":"chartist-plugin-zoom.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"chartist\"], function (Chartist) {\n      return (root.returnExportsGlobal = factory(Chartist));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"chartist\"));\n  } else {\n    root['Chartist.plugins.zoom'] = factory(Chartist);\n  }\n}(this, function (Chartist) {\n\n  /**\r\n   * Chartist.js zoom plugin.\r\n   *\r\n   */\r\n  (function (window, document, Chartist) {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n      // onZoom\r\n      // resetOnRightMouseBtn\r\n      pointClipOffset: 5\r\n    };\r\n\r\n    Chartist.plugins = Chartist.plugins || {};\r\n    Chartist.plugins.zoom = function (options) {\r\n\r\n      options = Chartist.extend({}, defaultOptions, options);\r\n\r\n      return function zoom(chart) {\r\n\r\n        if (!(chart instanceof Chartist.Line)) {\r\n          return;\r\n        }\r\n\r\n        var rect, svg, axisX, axisY, chartRect;\r\n        var downPosition;\r\n        var onZoom = options.onZoom;\r\n        var ongoingTouches = [];\r\n\r\n        chart.on('draw', function (data) {\r\n          var type = data.type;\r\n          if (type === 'line' || type === 'bar' || type === 'area') {\r\n            data.element.attr({ 'clip-path': 'url(#line-mask)' });\r\n          }\r\n        });\r\n\r\n        chart.on('created', function (data) {\r\n          axisX = data.axisX;\r\n          axisY = data.axisY;\r\n          chartRect = data.chartRect;\r\n          svg = data.svg._node;\r\n          rect = data.svg.elem('rect', {\r\n            x: 10,\r\n            y: 10,\r\n            width: 100,\r\n            height: 100,\r\n          }, 'ct-zoom-rect');\r\n          hide(rect);\r\n\r\n          var defs = data.svg.querySelector('defs') || data.svg.elem('defs');\r\n          var width = chartRect.width();\r\n          var height = chartRect.height();\r\n\r\n          function addMask(id, offset) {\r\n            defs\r\n              .elem('clipPath', {\r\n                id: id\r\n              })\r\n              .elem('rect', {\r\n                x: chartRect.x1 - offset,\r\n                y: chartRect.y2 - offset,\r\n                width: width + offset + offset,\r\n                height: height + offset + offset,\r\n                fill: 'white'\r\n              });\r\n          }\r\n          addMask('line-mask', 0);\r\n          addMask('point-mask', options.pointClipOffset);\r\n          var series = chart.svg.querySelectorAll(\".\" + data.options.classNames.series);\r\n          series = series? series.svgElements : [];\r\n          for(var i=0; i < series.length; ++i){\r\n            series[i].attr({'clip-path': 'url(#point-mask)'});\r\n          }\r\n\r\n          function on(event, handler) {\r\n            svg.addEventListener(event, handler);\r\n          }\r\n\r\n          on('mousedown', onMouseDown);\r\n          on('mouseup', onMouseUp);\r\n          on('mousemove', onMouseMove);\r\n          on('touchstart', onTouchStart);\r\n          on('touchmove', onTouchMove);\r\n          on('touchend', onTouchEnd);\r\n          on('touchcancel', onTouchCancel);\r\n        });\r\n\r\n\r\n\r\n        function copyTouch(touch) {\r\n          var p = position(touch, svg);\r\n          p.id = touch.identifier;\r\n          return p;\r\n        }\r\n\r\n        function ongoingTouchIndexById(idToFind) {\r\n          for (var i = 0; i < ongoingTouches.length; i++) {\r\n            var id = ongoingTouches[i].id;\r\n            if (id === idToFind) {\r\n              return i;\r\n            }\r\n          }\r\n          return -1;\r\n        }\r\n\r\n        function onTouchStart(event) {\r\n          var touches = event.changedTouches;\r\n          for (var i = 0; i < touches.length; i++) {\r\n            ongoingTouches.push(copyTouch(touches[i]));\r\n          }\r\n\r\n          if (ongoingTouches.length > 1) {\r\n            rect.attr(getRect(ongoingTouches[0], ongoingTouches[1]));\r\n            show(rect);\r\n          }\r\n        }\r\n\r\n        function onTouchMove(event) {\r\n          var touches = event.changedTouches;\r\n          for (var i = 0; i < touches.length; i++) {\r\n            var idx = ongoingTouchIndexById(touches[i].identifier);\r\n            ongoingTouches.splice(idx, 1, copyTouch(touches[i]));\r\n          }\r\n\r\n          if (ongoingTouches.length > 1) {\r\n            rect.attr(getRect(ongoingTouches[0], ongoingTouches[1]));\r\n            show(rect);\r\n            event.preventDefault();\r\n          }\r\n        }\r\n\r\n        function onTouchCancel(event) {\r\n          removeTouches(event.changedTouches);\r\n        }\r\n\r\n        function removeTouches(touches) {\r\n          for (var i = 0; i < touches.length; i++) {\r\n            var idx = ongoingTouchIndexById(touches[i].identifier);\r\n            if (idx >= 0) {\r\n              ongoingTouches.splice(idx, 1);\r\n            }\r\n          }\r\n        }\r\n\r\n        function onTouchEnd(event) {\r\n          if (ongoingTouches.length > 1) {\r\n            zoomIn(getRect(ongoingTouches[0], ongoingTouches[1]));\r\n          }\r\n          removeTouches(event.changedTouches);\r\n          hide(rect);\r\n        }\r\n\r\n        function onMouseDown(event) {\r\n          if (event.button === 0) {\r\n            var point = position(event, svg);\r\n            if (isInRect(point, chartRect)) {\r\n              downPosition = point;\r\n              rect.attr(getRect(downPosition, downPosition));\r\n              show(rect);\r\n              event.preventDefault();\r\n            }\r\n          }\r\n        }\r\n\r\n        function isInRect(point, rect) {\r\n          return point.x >= rect.x1 && point.x <= rect.x2 && point.y >= rect.y2 && point.y <= rect.y1;\r\n        }\r\n\r\n        var reset = function () {\r\n          chart.options.axisX.highLow = null;\r\n          chart.options.axisY.highLow = null;\r\n          chart.update(chart.data, chart.options);\r\n        };\r\n\r\n        function onMouseUp(event) {\r\n          if (event.button === 0 && downPosition) {\r\n            var box = getRect(downPosition, position(event, svg));\r\n            zoomIn(box);\r\n            downPosition = null;\r\n            hide(rect);\r\n          }\r\n          else if (options.resetOnRightMouseBtn && event.button === 2) {\r\n            reset();\r\n            event.preventDefault();\r\n          }\r\n        }\r\n\r\n        function zoomIn(rect) {\r\n          if (rect.width > 5 && rect.height > 5) {\r\n              var x1 = Math.max(0, rect.x - chartRect.x1);\r\n              var x2 = Math.min(chartRect.width(), x1 + rect.width);\r\n              var y2 = Math.min(chartRect.height(), chartRect.y1 - rect.y);\r\n              var y1 = Math.max(0, y2 - rect.height);\r\n\r\n              chart.options.axisX.highLow = { low: project(x1, axisX), high: project(x2, axisX) };\r\n              chart.options.axisY.highLow = { low: project(y1, axisY), high: project(y2, axisY) };\r\n\r\n              chart.update(chart.data, chart.options);\r\n              onZoom && onZoom(chart, reset);\r\n            }\r\n        }\r\n\r\n        function onMouseMove(event) {\r\n          if (downPosition) {\r\n            var point = position(event, svg);\r\n            if (isInRect(point, chartRect)) {\r\n              rect.attr(getRect(downPosition, point));\r\n              event.preventDefault();\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n    };\r\n\r\n    function hide(rect) {\r\n      rect.attr({ style: 'display:none' });\r\n    }\r\n\r\n    function show(rect) {\r\n      rect.attr({ style: 'display:block' });\r\n    }\r\n\r\n    function getRect(firstPoint, secondPoint) {\r\n      var x = firstPoint.x;\r\n      var y = firstPoint.y;\r\n      var width = secondPoint.x - x;\r\n      var height = secondPoint.y - y;\r\n      if (width < 0) {\r\n        width = -width;\r\n        x = secondPoint.x;\r\n      }\r\n      if (height < 0) {\r\n        height = -height;\r\n        y = secondPoint.y;\r\n      }\r\n      return {\r\n        x: x,\r\n        y: y,\r\n        width: width,\r\n        height: height\r\n      };\r\n    }\r\n\r\n    function position(event, svg) {\r\n      return transform(event.clientX, event.clientY, svg);\r\n    }\r\n\r\n    function transform(x, y, svgElement) {\r\n      var svg = svgElement.tagName === 'svg' ? svgElement : svgElement.ownerSVGElement;\r\n      var matrix = svg.getScreenCTM();\r\n      var point = svg.createSVGPoint();\r\n      point.x = x;\r\n      point.y = y;\r\n      point = point.matrixTransform(matrix.inverse());\r\n      return point || { x: 0, y: 0 };\r\n    }\r\n\r\n    function project(value, axis) {\r\n      var bounds = axis.bounds || axis.range;\r\n      var max = bounds.max;\r\n      var min = bounds.min;\r\n      if (axis.scale && axis.scale.type === 'log') {\r\n        var base = axis.scale.base;\r\n        return Math.pow(base,\r\n          value * baseLog(max / min, base) / axis.axisLength) * min;\r\n      }\r\n      var range = bounds.range || (max - min);\r\n      return (value * range / axis.axisLength) + min;\r\n    }\r\n\r\n    function baseLog(val, base) {\r\n      return Math.log(val) / Math.log(base);\r\n    }\r\n\r\n  } (window, document, Chartist));\r\n\n  return Chartist.plugins.zoom;\n\n}));\n"]}